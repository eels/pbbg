name: Deploy

on:
  workflow_dispatch:

jobs:
  deploy_server:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create application `.env` file
        run: |
          touch .env
          echo APP_KEY="${{ secrets.APP_KEY }}" >> .env
          echo APP_NAME="${{ secrets.APP_NAME }}" >> .env
          echo APP_SERVER_DOMAIN="${{ secrets.APP_SERVER_DOMAIN }}" >> .env
          echo APP_USE_SECURE_COOKIE_PREFIX="${{ secrets.APP_USE_SECURE_COOKIE_PREFIX }}" >> .env
          echo APP_WEB_CLIENT_DOMAIN="${{ secrets.APP_WEB_CLIENT_DOMAIN }}" >> .env
          echo HOST="${{ secrets.HOST }}" >> .env
          echo NODE_ENV="${{ secrets.NODE_ENV }}" >> .env
          echo PORT="${{ secrets.PORT }}" >> .env
          echo SESSION_COOKIE="${{ secrets.SESSION_COOKIE }}" >> .env
          echo SESSION_DRIVER="${{ secrets.SESSION_DRIVER }}" >> .env
          echo DRIVE_DISK="${{ secrets.DRIVE_DISK }}" >> .env
          echo DB_CONNECTION="${{ secrets.DB_CONNECTION }}" >> .env
          echo DB_NAME="${{ secrets.DB_NAME }}" >> .env
          echo DB_HOST="${{ secrets.DB_HOST }}" >> .env
          echo DB_PASSWORD="${{ secrets.DB_PASSWORD }}" >> .env
          echo DB_PORT="${{ secrets.DB_PORT }}" >> .env
          echo DB_USERNAME="${{ secrets.DB_USERNAME }}" >> .env
          echo SENTRY_DSN="${{ secrets.SENTRY_DSN }}" >> .env

      - name: Setup Node.js
        uses: actions/setup-node@v2.5.1
        with:
          node-version: lts/gallium

      - name: Retrieve Yarn cache directory
        id: yarn-cache
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"

      - name: Use Yarn cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          path: ${{ steps.yarn-cache.outputs.dir }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn install --ignore-scripts --prefer-offline

      - name: Install sharp linux binaries
        env:
          npm_config_arch: x64
          npm_config_platform: linux
        run: |
          yarn add sharp --ignore-workspace-root-check

      - name: Compress image assets
        env:
          WEB_CLIENT_PUBLIC: applications/web-client/public
        run: |
          npx imagemin-cli ${{ env.WEB_CLIENT_PUBLIC }}/* --out-dir=${{ env.WEB_CLIENT_PUBLIC }}

      - name: Build
        env:
          NODE_ENV: production
        run: |
          yarn clean
          yarn build
          yarn export

      - name: Precompress static client files
        run: |
          npx gzip-cli "applications/web-client/out/**/*.{css,html,js,json,svg,txt}" \
            --extension=br --extension=gz

      - name: Prepare deployment directory
        run: |
          yarn turbo prune --scope=@pbbg/server --docker
          mv out/json/* out
          rm -rf out/full
          rm -rf out/json
          mkdir -p out/applications/server/build/
          mkdir -p out/applications/web-client/build/
          mkdir -p out/docker/
          cp -r applications/server/build/* out/applications/server/build/
          cp -r applications/web-client/out/* out/applications/web-client/build/
          cp -r docker/* out/docker/
          cp -r .dockerignore out/
          cp -r .env out/
          cp -r docker-compose.production.yml out/
          cp -r docker-compose.yml out/
          cp -r turbo.json out/

      - name: Deploy to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PRIVATE_KEY_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          source: out,!node_modules
          strip_components: 1
          target: ${{ github.repository }}
          username: ${{ secrets.SSH_USERNAME }}

      - name: Prepare remote files, build, start and prune Docker images
        uses: appleboy/ssh-action@master
        env:
          DOCKER_BASE: docker-compose.yml
          DOCKER_PROD: docker-compose.production.yml
        with:
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PRIVATE_KEY_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          script_stop: true
          script: |
            export COMPOSE_DOCKER_CLI_BUILD=1
            export DOCKER_BUILDKIT=1
            cd ${{ github.repository }}
            chmod +x docker/node/lib/entrypoint.sh
            docker-compose --file ${{ env.DOCKER_BASE }} --file ${{ env.DOCKER_PROD }} build
            docker-compose --file ${{ env.DOCKER_BASE }} --file ${{ env.DOCKER_PROD }} up --detach
            docker system prune --all --force --volumes
