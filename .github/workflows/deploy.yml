name: Deploy

on:
  workflow_dispatch:
    branches:
      - main
    inputs:
      service:
        default: both
        description: Select which services to deploy
        options:
          - both
          - server
          - web-client
        required: true
        type: choice

jobs:
  deploy_server:
    name: Deploy Server
    runs-on: ubuntu-latest
    if: github.event.inputs.service == 'both' || github.event.inputs.service == 'server'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: ${{ github.repository }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.3.2

      - name: Apply Terraform Infrastructure Changes
        env:
          TF_VAR_DO_DOMAIN: ${{ env.TF_VAR_DO_DOMAIN }}
          TF_VAR_DO_SSH_FINGERPRINT: ${{ env.TF_VAR_DO_SSH_FINGERPRINT }}
          TF_VAR_DO_TOKEN: ${{ env.TF_VAR_DO_TOKEN }}
        run: |
          cd ${{ github.repository }}/terraform
          terraform init -input=false
          terraform validate
          terraform apply -input=false -compact-warnings -auto-approve

      - name: Create application `.env` file
        env:
          ENV_FILE: ${{ github.repository }}/.env
        run: |
          touch ${{ env.ENV_FILE }}
          echo APP_ADMIN_EMAIL="${{ secrets.APP_ADMIN_EMAIL }}" >> ${{ env.ENV_FILE }}
          echo APP_COOKIE_SECRET="${{ secrets.APP_COOKIE_SECRET }}" >> ${{ env.ENV_FILE }}
          echo APP_CERTBOT_DEBUG="${{ secrets.APP_CERTBOT_DEBUG }}" >> ${{ env.ENV_FILE }}
          echo APP_SECRET_CSRF_TOKEN="${{ secrets.APP_SECRET_CSRF_TOKEN }}" >> ${{ env.ENV_FILE }}
          echo APP_SECRET_JWT_TOKEN="${{ secrets.APP_SECRET_JWT_TOKEN }}" >> ${{ env.ENV_FILE }}
          echo APP_SERVER_DOMAIN="${{ secrets.APP_SERVER_DOMAIN }}" >> ${{ env.ENV_FILE }}
          echo APP_WEB_CLIENT_DOMAIN="${{ secrets.APP_WEB_CLIENT_DOMAIN }}" >> ${{ env.ENV_FILE }}
          echo NODE_PORT="${{ secrets.NODE_PORT }}" >> ${{ env.ENV_FILE }}
          echo POSTGRES_CONNECTION="${{ secrets.POSTGRES_CONNECTION }}" >> ${{ env.ENV_FILE }}
          echo POSTGRES_USER="${{ secrets.POSTGRES_USER }}" >> ${{ env.ENV_FILE }}
          echo POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" >> ${{ env.ENV_FILE }}
          echo SENTRY_DSN="${{ secrets.SENTRY_DSN }}" >> ${{ env.ENV_FILE }}

      - name: Setup Node.js
        uses: actions/setup-node@v2.5.1
        with:
          node-version: lts/gallium

      - name: Retrieve Yarn cache directory
        id: yarn-cache
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"

      - name: Use Yarn cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          path: ${{ steps.yarn-cache.outputs.dir }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile --ignore-scripts --prefer-offline

      - name: Build
        run: |
          yarn turbo run build --scope=@pbbg/server --include-dependencies --no-deps

      - name: Prepare directory for deployment
        run: |
          yarn rimraf **/node_modules
          rm -rf ${{ github.repository }}/.git
          rm -rf ${{ github.repository }}/.github
          rm -rf ${{ github.repository }}/.husky
          rm -rf ${{ github.repository }}/.vscode
          rm -rf ${{ github.repository }}/applications/web-client

      - name: Deploy to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PRIVATE_KEY_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          source: ${{ github.repository }}
          strip_components: 2
          target: ${{ github.repository }}
          username: ${{ secrets.SSH_USERNAME }}

      - name: Prepare remote files, build, start and prune Docker images
        uses: appleboy/ssh-action@master
        env:
          DOCKER_BASE: docker-compose.yml
          DOCKER_PROD: docker-compose.production.yml
        with:
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PRIVATE_KEY_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          script_stop: true
          script: |
            cd ${{ github.repository }}
            chmod +x ./docker/certbot/lib/init.sh
            chmod +x ./docker/nginx/lib/entrypoint.sh
            chmod +x ./docker/node/lib/entrypoint.sh
            COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose \
              --file ${{ env.DOCKER_BASE }} --file ${{ env.DOCKER_PROD }} build
            bash ./docker/certbot/lib/init.sh
            COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose \
              --file ${{ env.DOCKER_BASE }} --file ${{ env.DOCKER_PROD }} up --detach
            docker system prune --all --force --volumes

  deploy_web_client:
    name: Deploy Web Client
    runs-on: ubuntu-latest
    if: github.event.inputs.service == 'both' || github.event.inputs.service == 'web-client'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2.5.1
        with:
          node-version: lts/gallium

      - name: Retrieve Yarn cache directory
        id: yarn-cache
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"

      - name: Use Yarn cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          path: ${{ steps.yarn-cache.outputs.dir }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile --ignore-scripts --prefer-offline

      - name: Build
        run: |
          yarn turbo run build --scope=@pbbg/web-client --include-dependencies --no-deps
          yarn workspace @pbbg/web-client export
          touch applications/web-client/out/.nojekyll
          echo "${{ secrets.APP_WEB_CLIENT_DOMAIN }}" > applications/web-client/out/CNAME

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: applications/web-client/out
