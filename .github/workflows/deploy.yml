name: deploy

on:
  workflow_dispatch:

jobs:
  deploy_server:
    name: Deploy Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: ${{ github.repository }}

      - name: Create application `.env` file
        env:
          ENV_FILE: ${{ github.repository }}/.env
        run: |
          touch ${{ env.ENV_FILE }}
          echo POSTGRES_USER="${{ secrets.POSTGRES_USER }}" >> ${{ env.ENV_FILE }}
          echo POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" >> ${{ env.ENV_FILE }}

      - name: Prepare directory for deployment
        run: |
          rm -rf ${{ github.repository }}/.git
          rm -rf ${{ github.repository }}/.github
          rm -rf ${{ github.repository }}/.husky
          rm -rf ${{ github.repository }}/.vscode
          rm -rf ${{ github.repository }}/applications/web-client

      - name: Deploy to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PRIVATE_KEY_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          source: ${{ github.repository }}
          strip_components: 2
          target: ${{ github.repository }}
          username: ${{ secrets.SSH_USERNAME }}

      - name: Build and start new Docker images
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PRIVATE_KEY_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          script: |
            cd ${{ github.repository }}
            docker-compose build
            docker-compose --file docker-compose.yml --file docker-compose.production.yml up --detach
            docker system prune --all --force --volumes

  deploy_web_client:
    name: Deploy Web Client
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2.5.1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Retrieve Yarn Cache Directory
        id: yarn-cache
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"

      - name: Use Cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          path: ${{ steps.yarn-cache.outputs.dir }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: |
          yarn install --frozen-lockfile --ignore-scripts --prefer-offline

      - name: Build
        run: |
          yarn turbo run build --scope=@pbbg/web-client --include-dependencies --no-deps
          yarn workspace @pbbg/web-client export
          touch applications/web-client/out/.nojekyll

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: applications/web-client/out
